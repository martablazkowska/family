{"ast":null,"code":"var _jsxFileName = \"/Users/mblazko-macwro/Source/family/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport PageTitle from \"../components/PageTitle\";\n\nconst Index = ({\n  posts\n}) => __jsx(React.Fragment, null, __jsx(PageTitle, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, \"Hello, world.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, \"Next.js PWA Boilerplate starts your progressive web app off with a perfect Google Lighthouse score. To see this in action, open this website with Chrome, go to the \\u201CAudits\\u201D tab in dev tools, and click \\u201CRun audit\\u201D.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, \"Check out the\", \" \", __jsx(\"a\", {\n  href: \"https://github.com/pingboard/next-pwa-boilerplate\",\n  rel: \"noopener noreferrer\",\n  target: \"_blank\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }\n}, \"source code\"), \" \", \"and a more full\", \" \", __jsx(\"a\", {\n  href: \"https://nextter.now.sh\",\n  rel: \"noopener noreferrer\",\n  target: \"_blank\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }\n}, \"example\"), \" \", \"for details.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }\n}, \"Also, here is a list of lorem ipsum fetched from an API to prove how performant this app still is while using dynamic data sources:\"), __jsx(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }\n}, posts.map(({\n  id,\n  title\n}) => __jsx(\"li\", {\n  key: id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }\n}, title))));\n\nIndex.getInitialProps = async function () {\n  const fetchPosts = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const posts = await fetchPosts.json();\n  return {\n    posts\n  };\n};\n\nexport default Index;","map":{"version":3,"names":["fetch","PageTitle","Index","posts","map","id","title","getInitialProps","fetchPosts","json"],"sources":["/Users/mblazko-macwro/Source/family/pages/index.js"],"sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport PageTitle from \"../components/PageTitle\";\n\nconst Index = ({ posts }) => (\n  <>\n    <PageTitle>Hello, world.</PageTitle>\n    <p>\n      Next.js PWA Boilerplate starts your progressive web app off with a perfect\n      Google Lighthouse score. To see this in action, open this website with\n      Chrome, go to the “Audits” tab in dev tools, and click “Run audit”.\n    </p>\n    <p>\n      Check out the{\" \"}\n      <a\n        href=\"https://github.com/pingboard/next-pwa-boilerplate\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        source code\n      </a>{\" \"}\n      and a more full{\" \"}\n      <a\n        href=\"https://nextter.now.sh\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        example\n      </a>{\" \"}\n      for details.\n    </p>\n    <p>\n      Also, here is a list of lorem ipsum fetched from an API to prove how\n      performant this app still is while using dynamic data sources:\n    </p>\n    <ul>\n      {posts.map(({ id, title }) => (\n        <li key={id}>{title}</li>\n      ))}\n    </ul>\n  </>\n);\n\nIndex.getInitialProps = async function() {\n  const fetchPosts = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const posts = await fetchPosts.json();\n\n  return {\n    posts\n  };\n};\n\nexport default Index;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,KAAK,GAAG,CAAC;EAAEC;AAAF,CAAD,KACZ,4BACE,MAAC,SAAD;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,mBADF,EAEE;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,+OAFF,EAOE;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,oBACgB,GADhB,EAEE;EACE,IAAI,EAAC,mDADP;EAEE,GAAG,EAAC,qBAFN;EAGE,MAAM,EAAC,QAHT;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,iBAFF,EAQO,GARP,qBASkB,GATlB,EAUE;EACE,IAAI,EAAC,wBADP;EAEE,GAAG,EAAC,qBAFN;EAGE,MAAM,EAAC,QAHT;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,aAVF,EAgBO,GAhBP,iBAPF,EA0BE;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,yIA1BF,EA8BE;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,GACGA,KAAK,CAACC,GAAN,CAAU,CAAC;EAAEC,EAAF;EAAMC;AAAN,CAAD,KACT;EAAI,GAAG,EAAED,EAAT;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,GAAcC,KAAd,CADD,CADH,CA9BF,CADF;;AAuCAJ,KAAK,CAACK,eAAN,GAAwB,kBAAiB;EACvC,MAAMC,UAAU,GAAG,MAAMR,KAAK,CAAC,4CAAD,CAA9B;EACA,MAAMG,KAAK,GAAG,MAAMK,UAAU,CAACC,IAAX,EAApB;EAEA,OAAO;IACLN;EADK,CAAP;AAGD,CAPD;;AASA,eAAeD,KAAf"},"metadata":{},"sourceType":"module"}